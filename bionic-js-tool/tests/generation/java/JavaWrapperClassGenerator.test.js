const t = require('../../test-utils')

describe('JavaWrapperClassGenerator', () => {

    let Class, Parameter, Constructor, Property, Method, IntType

    function getCode(properties, methods, superclass = null, withScaffold = false) {
        const class1 = new Class('Class1', 'class description', [new Constructor('desc', [])], properties, methods,
            superclass, true, 'wrapper/Class1')
        const hostClassGeneratorForScaffolding = withScaffold ? class1.generator.forHosting('Project1', 'test.java').java : undefined
        return class1.generator.forWrapping(hostClassGeneratorForScaffolding, 'Project1', 'test.java').java.getSource()
    }

    beforeEach(() => {
        Class = t.requireModule('schema/Class').Class
        Parameter = t.requireModule('schema/Parameter').Parameter
        Constructor = t.requireModule('schema/Constructor').Constructor
        Property = t.requireModule('schema/Property').Property
        Method = t.requireModule('schema/Method').Method
        IntType = t.requireModule('schema/types/IntType').IntType
    })

    const getExpectedHeader = (superclassName = '') => [
        'package test.java.wrapper;',
        '',
        'import bionic.js.Bjs;',
        'import bionic.js.BjsNativeExports;',
        'import bionic.js.BjsNativeWrapper;',
        'import bionic.js.BjsNativeWrapperTypeInfo;',
        'import bionic.js.BjsTypeInfo;',
        'import bionic.js.Lambda;',
        'import jjbridge.api.value.strategy.FunctionCallback;',
        'import java.util.Date;',
        `import ${superclassName ? `test.java.module.${superclassName}BjsExport` : 'bionic.js.BjsExport'};`,
        '',
        `public interface Class1BjsExport extends ${superclassName}BjsExport {`,
        '    ',
        '    Bjs bjs = BjsNativeWrapperTypeInfo.get(Wrapper.class).bjsLocator.get();',
        '    ',
    ]

    const getExpectedWrapperHeader = (superclassName = 'BjsNativeWrapper') => [
        '    @BjsTypeInfo.BjsLocation(project = "Project1", module = "Class1")',
        `    class Wrapper<T extends Class1BjsExport> extends ${superclassName}<T> {`,
        '        ',
        '        private static Wrapper<?> wrapper;',
        '        private static Wrapper<?> getInstance() {',
        '            if (wrapper == null) {',
        '                wrapper = new Wrapper<>(getClass(Class1BjsExport.class, "Class1"));',
        '            }',
        '            return wrapper;',
        '        }',
        '        ',
        '        protected Wrapper(Class<T> realImplementation) {',
        '            super(realImplementation);',
        '        }',
        '        ',
    ]

    const emptyClassBindFunction = [
        '        ',
        '        @BjsNativeWrapperTypeInfo.Binder',
        '        public static void bjsBind_(BjsNativeExports nativeExports) {',
        '            nativeExports.exportBindFunction(getInstance().bjsBind());',
        '        }',
        '        ',
        '        protected FunctionCallback<?> bjsBind() {',
        '            return jsReferences -> {',
        '                Class1BjsExport bound = bjs.getBound(jsReferences[1], realImplementation);',
        '                if (bound == null) {',
        '                    bound = invokeConstructor(new Class[]{}, new Object[]{});',
        '                }',
        '                bjs.bindNative(bound, jsReferences[0]);',
        '                return bjs.jsUndefined();',
        '            };',
        '        }']

    const expectedFooter = [
        '    }',
        '}']

    test('empty class without inheritance', () => t.expectCode(getCode([], []),
        ...getExpectedHeader(),
        ...getExpectedWrapperHeader(),
        '        @BjsNativeWrapperTypeInfo.Exporter',
        '        public static BjsNativeExports bjsExportFunctions(BjsNativeExports nativeExports) {',
        '            return nativeExports;',
        '        }',
        ...emptyClassBindFunction,
        ...expectedFooter))

    test('empty class with inheritance', () => t.expectCode(getCode([], [], new Class('Superclass', `SuperClass description`, [], [], [], null, true, 'module/superclassPath')),
        ...getExpectedHeader('Superclass'),
        ...getExpectedWrapperHeader('SuperclassBjsExport.Wrapper'),
        '        @BjsNativeWrapperTypeInfo.Exporter',
        '        public static BjsNativeExports bjsExportFunctions(BjsNativeExports nativeExports) {',
        '            return SuperclassBjsExport.Wrapper.bjsExportFunctions(nativeExports);',
        '        }',
        ...emptyClassBindFunction,
        ...expectedFooter))

    test('class parts order', () => {
        const intType = new IntType()

        const properties = [
            new Property('instanceProperty1', 'desc', false, intType, ['get', 'set']),
            new Property('staticProperty1', 'desc', true, intType, ['get', 'set']),
            new Property('instanceProperty2', 'desc', false, intType, ['get', 'set']),
            new Property('staticProperty2', 'desc', true, intType, ['get', 'set']),
        ]
        const methods = [
            new Method('instanceMethod1', 'desc', false, intType, []),
            new Method('staticMethod1', 'desc', true, intType, []),
            new Method('instanceMethod2', 'desc', false, intType, []),
            new Method('staticMethod2', 'desc', true, intType, []),
        ]
        const code = getCode(properties, methods)

        t.expectCode(code,
            ...getExpectedHeader(),
            '    Integer instanceProperty1();',
            '    void instanceProperty1(Integer value);',
            '    Integer instanceProperty2();',
            '    void instanceProperty2(Integer value);',
            '    Integer instanceMethod1();',
            '    Integer instanceMethod2();',
            '    ',
            ...getExpectedWrapperHeader(),
            '        @BjsNativeWrapperTypeInfo.Exporter',
            '        public static BjsNativeExports bjsExportFunctions(BjsNativeExports nativeExports) {',
            '            Wrapper<?> singleton = getInstance();',
            '            return nativeExports',
            '                .exportFunction("bjsStaticGet_staticProperty1", singleton.bjsStaticGet_staticProperty1())',
            '                .exportFunction("bjsStaticSet_staticProperty1", singleton.bjsStaticSet_staticProperty1())',
            '                .exportFunction("bjsStaticGet_staticProperty2", singleton.bjsStaticGet_staticProperty2())',
            '                .exportFunction("bjsStaticSet_staticProperty2", singleton.bjsStaticSet_staticProperty2())',
            '                .exportFunction("bjsStatic_staticMethod1", singleton.bjsStatic_staticMethod1())',
            '                .exportFunction("bjsStatic_staticMethod2", singleton.bjsStatic_staticMethod2())',
            '                .exportFunction("bjsGet_instanceProperty1", singleton.bjsGet_instanceProperty1())',
            '                .exportFunction("bjsSet_instanceProperty1", singleton.bjsSet_instanceProperty1())',
            '                .exportFunction("bjsGet_instanceProperty2", singleton.bjsGet_instanceProperty2())',
            '                .exportFunction("bjsSet_instanceProperty2", singleton.bjsSet_instanceProperty2())',
            '                .exportFunction("bjs_instanceMethod1", singleton.bjs_instanceMethod1())',
            '                .exportFunction("bjs_instanceMethod2", singleton.bjs_instanceMethod2());',
            '        }',
            '        ',
            '        @BjsNativeWrapperTypeInfo.Binder',
            '        public static void bjsBind_(BjsNativeExports nativeExports) {',
            '            nativeExports.exportBindFunction(getInstance().bjsBind());',
            '        }',
            '        ',
            '        protected FunctionCallback<?> bjsBind() {',
            '            return jsReferences -> {',
            '                Class1BjsExport bound = bjs.getBound(jsReferences[1], realImplementation);',
            '                if (bound == null) {',
            '                    bound = invokeConstructor(new Class[]{}, new Object[]{});',
            '                }',
            '                bjs.bindNative(bound, jsReferences[0]);',
            '                return bjs.jsUndefined();',
            '            };',
            '        }',
            '        ',
            '        protected FunctionCallback<?> bjsStaticGet_staticProperty1() {',
            '            return jsReferences -> {',
            '                Integer result_bjs0 = invokeStatic("staticProperty1", new Class[]{}, new Object[]{});',
            '                return bjs.putPrimitive(result_bjs0);',
            '            };',
            '        }',
            '        ',
            '        protected FunctionCallback<?> bjsStaticSet_staticProperty1() {',
            '            return jsReferences -> {',
            '                invokeStatic("staticProperty1", new Class[]{Integer.class}, new Object[]{bjs.getInteger(jsReferences[0])});',
            '                return bjs.jsUndefined();',
            '            };',
            '        }',
            '        ',
            '        protected FunctionCallback<?> bjsStaticGet_staticProperty2() {',
            '            return jsReferences -> {',
            '                Integer result_bjs0 = invokeStatic("staticProperty2", new Class[]{}, new Object[]{});',
            '                return bjs.putPrimitive(result_bjs0);',
            '            };',
            '        }',
            '        ',
            '        protected FunctionCallback<?> bjsStaticSet_staticProperty2() {',
            '            return jsReferences -> {',
            '                invokeStatic("staticProperty2", new Class[]{Integer.class}, new Object[]{bjs.getInteger(jsReferences[0])});',
            '                return bjs.jsUndefined();',
            '            };',
            '        }',
            '        ',
            '        protected FunctionCallback<?> bjsStatic_staticMethod1() {',
            '            return jsReferences -> {',
            '                Integer result_bjs0 = invokeStatic("staticMethod1", new Class[]{}, new Object[]{});',
            '                return bjs.putPrimitive(result_bjs0);',
            '            };',
            '        }',
            '        ',
            '        protected FunctionCallback<?> bjsStatic_staticMethod2() {',
            '            return jsReferences -> {',
            '                Integer result_bjs0 = invokeStatic("staticMethod2", new Class[]{}, new Object[]{});',
            '                return bjs.putPrimitive(result_bjs0);',
            '            };',
            '        }',
            '        ',
            '        protected FunctionCallback<?> bjsGet_instanceProperty1() {',
            '            return jsReferences -> {',
            '                return bjs.putPrimitive(((Class1BjsExport) bjs.getWrapped(jsReferences[0])).instanceProperty1());',
            '            };',
            '        }',
            '        ',
            '        protected FunctionCallback<?> bjsSet_instanceProperty1() {',
            '            return jsReferences -> {',
            '                ((Class1BjsExport) bjs.getWrapped(jsReferences[0])).instanceProperty1(bjs.getInteger(jsReferences[1]));',
            '                return bjs.jsUndefined();',
            '            };',
            '        }',
            '        ',
            '        protected FunctionCallback<?> bjsGet_instanceProperty2() {',
            '            return jsReferences -> {',
            '                return bjs.putPrimitive(((Class1BjsExport) bjs.getWrapped(jsReferences[0])).instanceProperty2());',
            '            };',
            '        }',
            '        ',
            '        protected FunctionCallback<?> bjsSet_instanceProperty2() {',
            '            return jsReferences -> {',
            '                ((Class1BjsExport) bjs.getWrapped(jsReferences[0])).instanceProperty2(bjs.getInteger(jsReferences[1]));',
            '                return bjs.jsUndefined();',
            '            };',
            '        }',
            '        ',
            '        protected FunctionCallback<?> bjs_instanceMethod1() {',
            '            return jsReferences -> {',
            '                return bjs.putPrimitive(((Class1BjsExport) bjs.getWrapped(jsReferences[0])).instanceMethod1());',
            '            };',
            '        }',
            '        ',
            '        protected FunctionCallback<?> bjs_instanceMethod2() {',
            '            return jsReferences -> {',
            '                return bjs.putPrimitive(((Class1BjsExport) bjs.getWrapped(jsReferences[0])).instanceMethod2());',
            '            };',
            '        }',
            ...expectedFooter)
    })

    test('class parts order, withScaffold', () => {
        const intType = new IntType()

        const properties = [
            new Property('property', 'desc', false, intType, ['get', 'set']),
        ]
        const methods = [
            new Method('method', 'desc', false, intType, []),
        ]

        const superclassConstructor = new Constructor('desc', [new Parameter(new IntType(), 'param1')])
        const superclass = new Class('SuperClass', `SuperClass description`, [superclassConstructor], [], [], null,
            true, 'module/superclassPath')
        const code = getCode(properties, methods, superclass, true)

        t.expectCode(code,
            ...getExpectedHeader('SuperClass'),
            '    Integer property();',
            '    void property(Integer value);',
            '    Integer method();',
            '    ',
            ...getExpectedWrapperHeader('SuperClassBjsExport.Wrapper'),
            '        @BjsNativeWrapperTypeInfo.Exporter',
            '        public static BjsNativeExports bjsExportFunctions(BjsNativeExports nativeExports) {',
            '            Wrapper<?> singleton = getInstance();',
            '            return SuperClassBjsExport.Wrapper.bjsExportFunctions(nativeExports)',
            '                .exportFunction("bjsGet_property", singleton.bjsGet_property())',
            '                .exportFunction("bjsSet_property", singleton.bjsSet_property())',
            '                .exportFunction("bjs_method", singleton.bjs_method());',
            '        }',
            '        ',
            '        @BjsNativeWrapperTypeInfo.Binder',
            '        public static void bjsBind_(BjsNativeExports nativeExports) {',
            '            nativeExports.exportBindFunction(getInstance().bjsBind());',
            '        }',
            '        ',
            '        protected FunctionCallback<?> bjsBind() {',
            '            return jsReferences -> {',
            '                Class1BjsExport bound = bjs.getBound(jsReferences[1], realImplementation);',
            '                if (bound == null) {',
            '                    bound = invokeConstructor(new Class[]{}, new Object[]{});',
            '                }',
            '                bjs.bindNative(bound, jsReferences[0]);',
            '                return bjs.jsUndefined();',
            '            };',
            '        }',
            '        ',
            '        protected FunctionCallback<?> bjsGet_property() {',
            '            return jsReferences -> {',
            '                return bjs.putPrimitive(((Class1BjsExport) bjs.getWrapped(jsReferences[0])).property());',
            '            };',
            '        }',
            '        ',
            '        protected FunctionCallback<?> bjsSet_property() {',
            '            return jsReferences -> {',
            '                ((Class1BjsExport) bjs.getWrapped(jsReferences[0])).property(bjs.getInteger(jsReferences[1]));',
            '                return bjs.jsUndefined();',
            '            };',
            '        }',
            '        ',
            '        protected FunctionCallback<?> bjs_method() {',
            '            return jsReferences -> {',
            '                return bjs.putPrimitive(((Class1BjsExport) bjs.getWrapped(jsReferences[0])).method());',
            '            };',
            '        }',
            ...expectedFooter,
            '',
            '/* Class1 class scaffold:',
            '',
            'import test.java.wrapper.Class1BjsExport;',
            '',
            'public class Class1 extends SuperClass implements Class1BjsExport {',
            '    ',
            '    public Class1() {',
            '        ',
            '    }',
            '    ',
            '    public Integer property() {',
            '        ',
            '    }',
            '    public void property(Integer value) {',
            '        ',
            '    }',
            '    ',
            '    public Integer method() {',
            '        ',
            '    }',
            '}',
            '',
            '*/')
    })
})