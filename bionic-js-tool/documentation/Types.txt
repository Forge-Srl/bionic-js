BionicJS types

BJS offers a minimal set of types that allows the developer to effectively export most of the JS functionalities to native languages such as Java, Kotlin, Swift and ObjectiveC.
The supported primitive types are Bool, Date, Float, Int, String and Void, the latter used to mark the absence of a return type.
Vectors of elements are supported through the Array type and functions are represented by the Lambda type.
Class types are supported, allowing the developer to use JS classes in the native environment and vice versa.
Although using class types with BJS is very straight forward and everything works like magic, under the hood each class type is automatically assigned to one of the following four categories:

NativeClass
- An object of this type “live” in the native environment, can be instantiated and referenced in the JS code, its methods and properties are accessible from JS.
- How to obtain a NativeClass:
    - A JS class "Native1" must be exported and marked with the "@bionic native" annotation
    - "Native1" is used as type for a method parameter or as a return type
- Typical use: to export native functionality to the JS code.

NativeRef
- An object of this type “live” in the native environment and can be only referenced in the JS code.
- How to obtain a NativeRed:
    - No JS class called "Ref1" is exported with the "@bionic" annotation
    - "Ref1" is used as type for a method parameter or as a return type
    alternatively
    - "NativeRef<Ref1> is used as type for a method parameter or as a return type
- Typical use: to export the reference to a native object without exporting any functionality, the reference can be stored in JS and later passed as an argument of a native method or constructor.

JsClass
- An object of this type “live” in JS, can be instantiated and referenced in the native environment, its methods and properties are accessible from the native environment.
- How to obtain a NativeRed:
    - A JS class called "Js1" is exported with the "@bionic" annotation
    - "Js1" is used as type for a method parameter or as a return type
- Typical use: to export JS functionality to the native environment and reduce code duplication between multiple native platforms.

JsRef
- An object of this type “live” in JS and can be only referenced in the native environment.
- How to obtain a NativeRed:
    - "JsRef" is used as type for a method parameter or as a return type
- Typical use: to export the reference to a JS object without exporting any functionality, the reference can be stored in the native environment and later passed as an argument of a JS method or constructor. Also used to keep a reference to an anonymous JS object in the native environment.

All metadata required to characterize these types is fully contained in the JS code, in the form of annotations.